
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import BOTH, LEFT, RIGHT, VERTICAL, Y, Frame, Label, Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox, ttk
import requests
import subprocess

#from DatabasePages import LoginPage

from findScore import clear, clear1, clear2, clear3
from scores import center_window


def children_function(window, token):
    window.title('Children')
    global fetched_data

    token_value = token
    url = "http://127.0.0.1:8000/api/accounts/users"
    headers = {
    'Authorization': f'Bearer {token_value}'



    }

    response = requests.get(url, headers=headers)
    fetched_data = response.json()


    # try:
    #     response = requests.get(url, headers=headers)
    #     if response.status_code == 200:
    #         fetched_data = response.json()
    #     else:
    #         print(f"Request failed with status code: {response.status_code}")
    # except Exception as e:
    #     print(f"An error occurred: {str(e)}")



    path = r"C:\YusrGP\YusrProject\assets\frame_children"
    

    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path(path)


    def relative_to_assets(path: str) -> Path:
        return ASSETS_PATH / Path(path)
    
    def backeToHome_page():
        clear()
        clear1()
        clear2()
        clear3()
        file_to_run_path = r"C:\YusrGP\YusrProject\HomePage.py"
        window.destroy()
        subprocess.run(["python", file_to_run_path], check=True)
        
    def open_startTestPage():
        clear()
        clear1()
        clear2()
        clear3()
        file_to_run_path = r"C:\YusrGP\YusrProject\startTestPage.py"
        window.destroy()
        subprocess.run(["python", file_to_run_path], check=True)
        #window.destroy() # Close the current window
        #import startTestPage.py

    # window = Tk()

    window.geometry("396x688")
    window.configure(bg = "#FFEDED")

    main_frame = Frame(window)
    main_frame.pack(fill=BOTH, expand=1)

    canvas = Canvas(main_frame)
    canvas.pack(side=LEFT, fill=BOTH, expand=1)

    my_scrollbar = ttk.Scrollbar(main_frame, orient=VERTICAL, command=canvas.yview)
    my_scrollbar.pack(side=RIGHT, fill=Y)

    canvas.configure(yscrollcommand=my_scrollbar.set)
    canvas.bind('<Configure>', lambda e: canvas.configure(scrollregion = canvas.bbox("all")))

    second_frame = Frame(canvas)

    canvas.create_window((0,0), window=second_frame, anchor="nw")

    my_label = Label(second_frame)

    


    ###############Text part#################################

    shift = 0

    ids = [item["id"] for item in fetched_data][1:]
    names = [item["name"] for item in fetched_data][1:]
    ages = [item["age"] for item in fetched_data][1:]
    sexs = [item["sex"] for item in fetched_data][1:]


    for index in range(len(names)):

        canvas.create_rectangle(
            36.0,
            290.0 + shift,
            367.0,
            406.0 + shift,
            fill="#E8BCBC",
            outline="")
        
        canvas.create_text(
            271.0,
            339.0 + shift,
            anchor="nw",
            text=":العمر",
            fill="#000000",
            font=("Abel Regular", 20 * -1)
        )

        canvas.create_text(
            271.0,
            368.0 + shift,
            anchor="nw",
            text=":الجنس",
            fill="#000000",
            font=("Abel Regular", 20 * -1)
        )

        canvas.create_text(
            271.0,
            310.0 + shift,
            anchor="nw",
            text=":الإسم",
            fill="#000000",
            font=("Abel Regular", 20 * -1)
        )

        canvas.create_text(
            232.0 - 10,
            368.0 + shift,
            anchor="nw",
            text=sexs[index],
            fill="#000000",
            font=("AbhayaLibre Regular", 16 * -1)
        )

        canvas.create_text(
            232.0 - 10,
            339.0 + shift,
            anchor="nw",
            text=ages[index],
            fill="#000000",
            font=("AbhayaLibre Regular", 16 * -1)
        )

        canvas.create_text(
            232.0 - 10,
            310.0 + shift,
            anchor="nw",
            text=names[index],
            fill="#000000",
            font=("AbhayaLibre Regular", 16 * -1),
        )

        shift += 150
    
    ###############buttons part#################################

    start_button_images = {}
    stop_button_images = {}

    for i in range(len(ids)):
        start_button_images[f'button_image_start_{i}'] = [PhotoImage(file=relative_to_assets("button_2.png")), ids[i]]

    
    for i in range(len(ids)):
        stop_button_images[f'button_image_stop_{i}'] = [PhotoImage(file=relative_to_assets("button_1.png")),ids[i]]
    
    
    shift = 0
    

    def delete_button(id):
        print(f"delete button ID is {id}")
        url = f"http://127.0.0.1:8000/api/accounts/delete/{id}"
        headers = {
        'Authorization': f'Bearer {token}'
        }

        response = requests.delete(url, headers=headers)
        
        fetched_data = response.json()
        print(fetched_data)
        messagebox.showinfo("", fetched_data["message"])
        

        # try:
        #     response = requests.delete(url, headers=headers)
        #     data = response.json()
        #     print(data)
        #     if response.status_code == 200:
        #         fetched_data = response.json()
        #         print(fetched_data)
        #         messagebox.showinfo(fetched_data["message"], fetched_data["message"])
        #     else:
        #         print(f"Request failed with status code: {response.status_code}")
        # except Exception as e:
        #     print(f"An error occurred: {str(e)}")



            
    
    def print_id(id):
        print(f"ID is {id}")
 
    for key, value in start_button_images.items():
        key = value[0]
        id = value[1]
        button_start = Button(
            main_frame,
            image=key,
            borderwidth=0,
            highlightthickness=0,
            command= open_startTestPage,
            relief="flat",
            text=f"Button{id}"
        )


        canvas.create_window(
        62.99560546875,  # X-coordinate inside canvas
        298.0 + shift,  # Y-coordinate inside canvas
        window=button_start,
        anchor="nw")

        shift += 150

    
    shift = 0

    for key, value in stop_button_images.items():

        key = value[0]
        id = value[1]
   
        button_delete = Button(
            main_frame,
            image=key,
            borderwidth=0,
            highlightthickness=0,
            command=lambda button_id = id: delete_button(button_id),
            relief="flat",
        )
       
        canvas.create_window(
        62.99560546875,  # X-coordinate inside canvas
        346.0 + shift,  # Y-coordinate inside canvas
        window=button_delete,
        anchor="nw")

        shift += 150


#################################################################


    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        203.0,
        150.0,
        image=image_image_1
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=backeToHome_page,
        relief="flat"
    )
    button_3.place(
        x=23.17822265625,
        y=18.272918701171875,
        width=60.05078125,
        height=51.63928985595703
    )

    canvas.create_window(
    23.17822265625,  # X-coordinate inside canvas
    18.272918701171875,  # Y-coordinate inside canvas
    window=button_3,
    anchor="nw"
)
    
    window.resizable(False, False)
    center_window(window)
    window.mainloop()